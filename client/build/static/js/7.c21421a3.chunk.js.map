{"version":3,"sources":["dataProvider/graphql.js"],"names":["customBuildQuery","introspectionResults","buildQuery","buildQueryFactory","type","resource","params","DELETE","query","gql","_templateObject","variables","id","parseResponse","_ref","data","concat","Error","__webpack_exports__","buildApolloClient","clientOptions","uri","introspection","operationNames","Object","_Users_federicocrespo_Desktop_Dev_Repos_commander_examples_demo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","name","then","dataProvider","getGqlResource"],"mappings":"2TAKA,IAyBMA,EAAmB,SAAAC,GACrB,IAAMC,EAAaC,YAAkBF,GAErC,OAAO,SAACG,EAAMC,EAAUC,GACpB,OAAIF,IAASG,IACF,CACHC,MAAOC,IAAFC,IAAuBL,EAChBA,GAEZM,UAAW,CAAEC,GAAIN,EAAOM,IACxBC,cAAe,SAAAC,GACX,GADyBA,EAAXC,KACN,SAAAC,OAAUX,IACd,MAAO,CAAEU,KAAM,CAAEH,GAAIN,EAAOM,KAGhC,MAAM,IAAIK,MAAJ,oBAAAD,OAA8BX,MAKzCH,EAAWE,EAAMC,EAAUC,KAI3BY,EAAA,mBACX,OAAOC,YAAkB,CACrBC,cAAe,CACXC,IAAK,iCAETC,cAAe,CACXC,eAAeC,OAAAC,EAAA,EAAAD,CAAA,GACVjB,IAAS,SAAAF,GAAQ,eAAAW,OAAaX,EAASqB,SAGhDxB,WAAYF,IACb2B,KAAK,SAAAC,GAAY,OAAI,SAACxB,EAAMC,EAAUC,GAAjB,OACpBsB,EAAaxB,EA7DE,SAAAC,GACnB,OAAQA,GACJ,IAAK,YACD,MAAO,WAEX,IAAK,aACD,MAAO,WAEX,IAAK,WACD,MAAO,UAEX,IAAK,WACD,MAAO,UAEX,IAAK,UACD,MAAO,SAEX,IAAK,WACD,MAAO,UAEX,QACI,MAAM,IAAIY,MAAJ,oBAAAD,OAA8BX,KAwCrBwB,CAAexB,GAAWC","file":"static/js/7.c21421a3.chunk.js","sourcesContent":["import buildApolloClient, {\n    buildQuery as buildQueryFactory,\n} from 'ra-data-graphql-simple';\nimport { DELETE } from 'ra-core';\nimport gql from 'graphql-tag';\nconst getGqlResource = resource => {\n    switch (resource) {\n        case 'customers':\n            return 'Customer';\n\n        case 'categories':\n            return 'Category';\n\n        case 'commands':\n            return 'Command';\n\n        case 'products':\n            return 'Product';\n\n        case 'reviews':\n            return 'Review';\n\n        case 'invoices':\n            return 'Invoice';\n\n        default:\n            throw new Error(`Unknown resource ${resource}`);\n    }\n};\n\nconst customBuildQuery = introspectionResults => {\n    const buildQuery = buildQueryFactory(introspectionResults);\n\n    return (type, resource, params) => {\n        if (type === DELETE) {\n            return {\n                query: gql`mutation remove${resource}($id: ID!) {\n                    remove${resource}(id: $id)\n                }`,\n                variables: { id: params.id },\n                parseResponse: ({ data }) => {\n                    if (data[`remove${resource}`]) {\n                        return { data: { id: params.id } };\n                    }\n\n                    throw new Error(`Could not delete ${resource}`);\n                },\n            };\n        }\n\n        return buildQuery(type, resource, params);\n    };\n};\n\nexport default () => {\n    return buildApolloClient({\n        clientOptions: {\n            uri: 'http://localhost:4000/graphql',\n        },\n        introspection: {\n            operationNames: {\n                [DELETE]: resource => `remove${resource.name}`,\n            },\n        },\n        buildQuery: customBuildQuery,\n    }).then(dataProvider => (type, resource, params) =>\n        dataProvider(type, getGqlResource(resource), params)\n    );\n};\n"],"sourceRoot":""}